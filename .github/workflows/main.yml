name: Build and Deploy Flask App to EKS 

on: 
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: flask-app-repo
  CLUSTER_NAME: devops-cluster
  DEPLOYMENT_NAME: flask-app
  CONTAINER_NAME: flask-app
  IMAGE_TAG: latest
  S3_BUCKET: terraform-state-bucketxyz123

jobs:
  terraform-backend:
    name: Stage 1 – Create Backend (Local)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Temporarily disable S3 backend config
        run: |
          mv ./flask-app/infra/s3_backend.tf ./flask-app/infra/s3_backend.tf.disabled || true

      - name: Terraform init & apply (local backend)
        working-directory: ./flask-app/infra
        run: |
          terraform init
          terraform apply -target=aws_iam_user.yakir \
                          -target=aws_iam_policy.yakir_admin_policy \
                          -target=aws_iam_user_policy_attachment.attach_yakir_admin_policy \
                          -target=aws_iam_access_key.yakir_access_key
                          -auto-approve

  terraform-main:
    name: Stage 2 – Deploy Infra with S3 backend
    runs-on: ubuntu-latest
    needs: terraform-backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Restore S3 backend config
        run: |
          mv ./flask-app/infra/s3_backend.tf.disabled ./flask-app/infra/s3_backend.tf || true

      - name: Terraform init, plan, apply (with S3 backend)
        working-directory: ./flask-app/infra
        run: |
          terraform init \
            -backend-config="bucket=${{ env.S3_BUCKET }}" \
            -backend-config="key=terraform/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
          terraform plan
          terraform apply -auto-approve

  deploy-flask:
    name: Stage 3 – Build & Deploy Flask App
    runs-on: ubuntu-latest
    needs: terraform-main

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./flask-app/app
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Deploy with Helm
        run: |
          helm upgrade --install $DEPLOYMENT_NAME ./flask-app/helm/flask-app \
            --set image.repository=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY \
            --set image.tag=$IMAGE_TAG \
            --set service.type=LoadBalancer
